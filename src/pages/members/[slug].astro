---
import DefaultLayout from '../../layouts/DefaultLayout.astro'
import MemberInfo from '../../components/MemberInfo.astro'
import { getCollection } from 'astro:content'
import type { GetStaticPaths } from 'astro'

export const getStaticPaths = (async () => {
	const members = await getCollection('members')

	return members.map((member) => ({
		params: { slug: member.data.userid || member.slug },
		props: { member },
	}))
}) satisfies GetStaticPaths

const { member } = Astro.props

// stories 컬렉션에서 해당 멤버가 작성한 글 찾기
const allStories = await getCollection('stories')
console.log(
	allStories.length,
	allStories.map((story) => story.data.title),
)
const memberStories = allStories.filter((story) => story.data.author === member.data.userid)

// 기여한 글 찾기 (contributor 배열에 멤버 ID가 포함된 글)
const contributedStories = allStories.filter(
	(story) =>
		story.data.contributor &&
		story.data.contributor.includes(member.data.userid) &&
		story.data.author !== member.data.userid, // 이미 작성한 글에 포함되지 않도록
)
console.log(
	member.data.userid,
	contributedStories.length,
	contributedStories.map((story) => story.data.title),
)

// 글 날짜 기준으로 정렬 (최신 글이 먼저 오도록)
const sortByDate = (a, b) => {
	const dateA = a.data.pubDate instanceof Date ? a.data.pubDate : new Date(a.data.pubDate || 0)
	const dateB = b.data.pubDate instanceof Date ? b.data.pubDate : new Date(b.data.pubDate || 0)
	return dateB.getTime() - dateA.getTime()
}

memberStories.sort(sortByDate)
contributedStories.sort(sortByDate)

// 임시 글(draft) 제외
const publishedStories = memberStories.filter((story) => !story.data.draft)
// const publishedContributions = contributedStories.filter((story) => !story.data.draft)
---

<DefaultLayout
	title={member.data.title || '멤버 정보'}
	description={member.data.description || `${member.data.title || '멤버'}님의 프로필입니다.`}>
	<section class="my-12">
		<div class="container">
			<div class="back-link">
				<a href="/members/">← 전체 기여자 목록</a>
			</div>

			<div class="member-detail">
				<MemberInfo member={member} />

				{/* 멤버가 작성한 스토리 목록 */}
				{
					publishedStories.length > 0 && (
						<div class="member-stories">
							<h2>작성한 글</h2>
							<ul>
								{publishedStories.map((story) => (
									<li>
										<a href={`/stories/${story.data.slug || story.slug}`}>
											<div class="story-info">
												{story.data.pubDate && (
													<time
														datetime={
															story.data.pubDate instanceof Date
																? story.data.pubDate.toISOString()
																: new Date(story.data.pubDate).toISOString()
														}>
														{story.data.pubDate instanceof Date
															? story.data.pubDate.toLocaleDateString('ko-KR')
															: new Date(story.data.pubDate).toLocaleDateString('ko-KR')}
													</time>
												)}
												<h3 class="story-title">{story.data.title}</h3>
												{story.data.description && <p class="story-description">{story.data.description}</p>}
											</div>
										</a>
									</li>
								))}
							</ul>
						</div>
					)
				}

				{/* 멤버가 기여한 스토리 목록 */}
				{
					contributedStories.length > 0 && (
						<div class="member-contributions">
							<h2>참여 활동</h2>
							<ul>
								{contributedStories.map((story) => (
									<li>
										{story.data.draft ? (
											<div class="contribution-info">
												<h3 class="contribution-title">{story.data.title}</h3>
												{story.data.description && <p class="contribution-description">{story.data.description}</p>}
											</div>
										) : (
											<a href={`/stories/${story.data.slug || story.slug}`}>
												<div class="contribution-info">
													<h3 class="contribution-title">{story.data.title}</h3>
													{story.data.description && <p class="contribution-description">{story.data.description}</p>}
												</div>
											</a>
										)}
									</li>
								))}
							</ul>
						</div>
					)
				}
			</div>
		</div>
	</section>
</DefaultLayout>

<style lang="scss">
	.back-link {
		margin-bottom: 2rem;
		a {
			display: inline-block;
			padding: 0.5rem 0;
			text-decoration: none;

			&:hover {
				text-decoration: underline;
			}
		}
	}

	.member-detail {
		margin: 0 auto;
		border-radius: 0.5rem;
		padding: 2rem;
		max-width: 800px;
	}

	.member {
		dt,
		dd:not(.image) {
			margin-left: 90px;
		}
		dt {
			margin-bottom: 0.5rem;
			font-weight: bold;
			font-size: 1.8rem;
		}
		dd.image {
			margin-top: -3rem;
			margin-bottom: -2.5rem;
			border-radius: 8px;
			padding-top: 1rem;
			width: 80px;
			height: 80px;
			overflow: hidden;
		}
		dd.bio {
			margin-bottom: 1.25rem;
			min-height: 0.25rem;
			line-height: 1.5;
		}

		dd.links {
			a {
				display: inline-flex;
				justify-content: center;
				align-items: center;
				margin-right: 0.5rem;
				padding: 0.5rem 0.3rem;
				font-size: 1.5rem;

				&:hover {
					transform: translateY(-3px);
					transition: transform 0.2s ease-in-out;
				}
			}
		}

		img {
			display: block;
			float: left;
			margin-top: -1rem;
			margin-right: 10px;
			max-width: 80px;
		}
	}

	.member-content {
		margin-top: 3rem;
		border-top: 1px solid var(--theme-divider, rgba(0, 0, 0, 0.1));
		padding-top: 2rem;
		line-height: 1.6;
	}

	/* 멤버 스토리 섹션 스타일 */
	.member-stories,
	.member-contributions {
		margin-top: 1rem;
		border-top: 1px solid var(--theme-divider, rgba(0, 0, 0, 0.1));
		padding-top: 2rem;

		h2 {
			margin-bottom: 0;
			font-size: 1.5rem;
		}
		h3 {
			font-size: 1rem;
		}

		ul {
			margin: 0;
			padding: 0;
			list-style: none;
		}

		li {
			margin-bottom: 1rem;
			&:last-child {
				margin-bottom: 0;
			}
		}

		a {
			display: block;
			transition: transform 0.2s ease-in-out;
			border-radius: 0.5rem;
			padding: 0.5rem 0;
			text-decoration: none;

			&:hover {
				transform: translateY(-3px);
				.story-title {
					text-decoration: underline;
				}
			}
		}
		.story-info,
		.contribution-info {
			display: flex;
			align-items: flex-start;
			.story-title {
				margin: 0 1rem;
				padding: 0;
				width: 50%;
				font-size: 1rem;
				line-height: 1.5;
			}
			time {
				display: inline-block;
				opacity: 0.8;
				min-width: 120px;
				font-size: 0.95rem;
			}

			.story-description {
				margin: 0;
				font-size: 0.95rem;
				line-height: 1.5;
			}
		}
	}

	/* 기여한 글 목록 스타일 - 필요하다면 다른 스타일 추가 */
	.member-contributions {
		margin-top: 2rem;
		.contribution-title {
			display: flex;
			min-width: 40%;
			line-height: 1.5;
		}
		.contribution-description {
			line-height: 1.5;
		}
	}

	@media screen and (max-width: 768px) {
		.member-stories,
		.member-contributions {
			.story-info,
			.contribution-info {
				display: flex;
				flex-direction: column;
				.story-title,
				.contribution-title {
					width: 100%;
				}
			}
		}
	}
</style>
