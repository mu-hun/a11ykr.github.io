---
import DefaultLayout from '../../layouts/DefaultLayout.astro'
import MemberInfo from '../../components/MemberInfo.astro'
import { Pagination } from 'accessible-astro-components'
import { getCollection } from 'astro:content'
import type { GetStaticPaths } from 'astro'

export const getStaticPaths = (async ({ paginate }) => {
  const members = await getCollection('members')
  return paginate(members, { pageSize: 15 })
}) satisfies GetStaticPaths

// 모든 멤버 가져오기
const allMembers = await getCollection('members')

const { page } = Astro.props
// console.log('전체 멤버 수:', allMembers.length)
---

<DefaultLayout
  title="기여한 사람들"
  description="글쓰기, 번역, 개발, 정보 공유, 질문 등 다양한 방식으로 A11YKR에 기여하는 사람들입니다.">
  <section class="my-12">
    <div class="space-content container">
      <h1>기여한 사람들</h1>
      <p class="text-2xl">글쓰기, 번역, 개발, 정보 공유, 질문 등 다양한 방식으로 이 공간에 기여하는 사람들입니다.</p>
    </div>
  </section>
  <section class="my-12">
    <div class="container">
      <p class="text-sm"><em>전체 {allMembers.length}명</em></p>

      <ul class="my-3">
        {
          allMembers.length > 0 ? (
            allMembers.map((member) => (
              <li>
                <MemberInfo member={member} />
              </li>
            ))
          ) : (
            <li class="empty-message">표시할 멤버가 없습니다.</li>
          )
        }
      </ul>
      <div class="mt-12 grid place-content-center">
        <Pagination
          firstPage={page.url.prev ? '/members' : null}
          previousPage={page.url.prev ? page.url.prev : null}
          nextPage={page.url.next ? page.url.next : null}
          lastPage={page.url.next ? `/members/${Math.ceil(page.total / page.size)}` : null}
          currentPage={page.currentPage}
          totalPages={Math.ceil(page.total / page.size)}
          ariaLabel="페이지 탐색"
          firstPageLabel="첫 페이지로 이동"
          previousPageLabel="이전 페이지로 이동"
          nextPageLabel="다음 페이지로 이동"
          lastPageLabel="마지막 페이지로 이동"
          renderProgress={({ currentPage, totalPages }) => `페이지 ${currentPage} / ${totalPages}`}
          renderPageLabel={({ type, page }) => {
            switch (type) {
              case 'first':
                return `첫 페이지로 이동 (페이지 1)`
              case 'previous':
                return `이전 페이지로 이동 (페이지 ${page})`
              case 'next':
                return `다음 페이지로 이동 (페이지 ${page})`
              case 'last':
                return `마지막 페이지로 이동 (페이지 ${page})`
              default:
                return `페이지 ${page}로 이동`
            }
          }}
        />
      </div>
    </div>
  </section>
</DefaultLayout>

<style lang="scss">
  ul {
    display: grid;
    grid-template-columns: 1fr;
    grid-gap: 2rem;

    @media (min-width: 550px) {
      grid-template-columns: repeat(2, 1fr);
      grid-gap: 2rem;
    }

    @media (min-width: 950px) {
      grid-template-columns: repeat(3, 1fr);
    }

    aside {
      display: block;
      width: 100%;
      text-align: left;
    }
  }

  .empty-message {
    grid-column: 1 / -1;
    border-radius: 0.5rem;
    background-color: var(--theme-surface-1, #f8f9fa);
    padding: 2rem;
    text-align: center;
  }
</style>
